//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Student_Assets/Ayden's/Inputs/Aydens.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Aydens: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Aydens()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Aydens"",
    ""maps"": [
        {
            ""name"": ""Interact"",
            ""id"": ""202fd8c7-3bd1-4443-a096-c9e1af0f2731"",
            ""actions"": [
                {
                    ""name"": ""useKey"",
                    ""type"": ""Button"",
                    ""id"": ""91561a9b-196b-4ba6-b631-3a4ffc2bd125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnEquip"",
                    ""type"": ""Button"",
                    ""id"": ""e6f19e8d-0644-48c9-92f2-5bba1fd2df45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""189b3cb0-6b1b-46b3-ae92-3d4b04af3380"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""useKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f33e6f0b-9f65-4a99-95e5-a1ee7becabe4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnEquip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Use"",
            ""id"": ""a78fb5ce-77fa-4523-a37c-d5a875b75dff"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""471f1bba-75b1-42a4-96fe-99acb6c6b2d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5960755b-8a5c-453c-bcb7-39e429f6d4cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_useKey = m_Interact.FindAction("useKey", throwIfNotFound: true);
        m_Interact_UnEquip = m_Interact.FindAction("UnEquip", throwIfNotFound: true);
        // Use
        m_Use = asset.FindActionMap("Use", throwIfNotFound: true);
        m_Use_Use = m_Use.FindAction("Use", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_useKey;
    private readonly InputAction m_Interact_UnEquip;
    public struct InteractActions
    {
        private @Aydens m_Wrapper;
        public InteractActions(@Aydens wrapper) { m_Wrapper = wrapper; }
        public InputAction @useKey => m_Wrapper.m_Interact_useKey;
        public InputAction @UnEquip => m_Wrapper.m_Interact_UnEquip;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @useKey.started += instance.OnUseKey;
            @useKey.performed += instance.OnUseKey;
            @useKey.canceled += instance.OnUseKey;
            @UnEquip.started += instance.OnUnEquip;
            @UnEquip.performed += instance.OnUnEquip;
            @UnEquip.canceled += instance.OnUnEquip;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @useKey.started -= instance.OnUseKey;
            @useKey.performed -= instance.OnUseKey;
            @useKey.canceled -= instance.OnUseKey;
            @UnEquip.started -= instance.OnUnEquip;
            @UnEquip.performed -= instance.OnUnEquip;
            @UnEquip.canceled -= instance.OnUnEquip;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);

    // Use
    private readonly InputActionMap m_Use;
    private List<IUseActions> m_UseActionsCallbackInterfaces = new List<IUseActions>();
    private readonly InputAction m_Use_Use;
    public struct UseActions
    {
        private @Aydens m_Wrapper;
        public UseActions(@Aydens wrapper) { m_Wrapper = wrapper; }
        public InputAction @Use => m_Wrapper.m_Use_Use;
        public InputActionMap Get() { return m_Wrapper.m_Use; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UseActions set) { return set.Get(); }
        public void AddCallbacks(IUseActions instance)
        {
            if (instance == null || m_Wrapper.m_UseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UseActionsCallbackInterfaces.Add(instance);
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
        }

        private void UnregisterCallbacks(IUseActions instance)
        {
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
        }

        public void RemoveCallbacks(IUseActions instance)
        {
            if (m_Wrapper.m_UseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUseActions instance)
        {
            foreach (var item in m_Wrapper.m_UseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UseActions @Use => new UseActions(this);
    public interface IInteractActions
    {
        void OnUseKey(InputAction.CallbackContext context);
        void OnUnEquip(InputAction.CallbackContext context);
    }
    public interface IUseActions
    {
        void OnUse(InputAction.CallbackContext context);
    }
}
